gameDate >= as.Date("2014-09-15") & gameDate <= as.Date("2015-08-15") ~ 7,
gameDate >= as.Date("2015-09-15") & gameDate <= as.Date("2016-08-15") ~ 8,
gameDate >= as.Date("2016-09-15") & gameDate <= as.Date("2017-08-15") ~ 9,
gameDate >= as.Date("2017-09-15") & gameDate <= as.Date("2018-08-15") ~ 10,
gameDate >= as.Date("2018-09-15") & gameDate <= as.Date("2019-08-15") ~ 11,
gameDate >= as.Date("2019-09-15") & gameDate <= as.Date("2020-08-15") ~ 12,
gameDate >= as.Date("2020-09-15") & gameDate <= as.Date("2021-08-15") ~ 13,
gameDate >= as.Date("2021-09-15") & gameDate <= as.Date("2022-08-15") ~ 14,
gameDate >= as.Date("2022-09-15") & gameDate <= as.Date("2023-08-15") ~ 15,
gameDate >= as.Date("2023-09-15") & gameDate <= as.Date("2024-08-15") ~ 16
)) |>
mutate(playoffs = case_when(
season_num == 1 ~ "Made Playoffs",
season_num == 2 ~ "Made Playoffs",
season_num == 3 ~ "Made Playoffs",
season_num == 4 ~ "Made Playoffs",
season_num == 5 ~ "Did Not Make Playoffs",
season_num == 6 ~ "Made Playoffs",
season_num == 7 ~ "Did Not Make Playoffs",
season_num == 8 ~ "Made Playoffs",
season_num == 9 ~ "Did Not Make Playoffs",
season_num == 10 ~ "Made Playoffs",
season_num == 11 ~ "Did Not Make Playoffs",
season_num == 12 ~ "Made Playoffs",
season_num == 13 ~ "Did Not Make Playoffs",
season_num == 14 ~ "Did Not Make Playoffs",
season_num == 15 ~ "Did Not Make Playoffs",
season_num == 16 ~ "TBD"
)) |>
group_by(season_num) |>
mutate(
games_played = cumsum(GP),
points = cumsum(P),
year = year(gameDate)
)
standings <- game_all_season |>
select(gameDate, P, GP, season_num, playoffs, games_played, points, year)
recent_season <- standings |>
filter(season_num == max(standings$season_num))
curr_games <- max(recent_season$games_played)
curr_points <- max(recent_season$points)
league_standings <- read_csv("./Data/Standings_NHL/Standings.csv")
#| label: standings table
#| include: true
#| echo: false
knitr::kable(league_standings |>
mutate(Wins = W,
Losses = L,
OTL = OT,
Points = P,
`Games Played` = GP) |>
select(Team, `Games Played`, Wins, Losses, OTL, Points))
# Info on using kable to make a table in quarto:
# https://stackoverflow.com/questions/76135432/convert-dataframe-to-markdown-table-in-quarto
#| label: standings chart
#| include: true
#| echo: false
league_standings_abbr <- league_standings |>
mutate(point_per_game = P - GP) |>
mutate(Team = case_when(
Team == "Vegas Golden Knights" ~ "VGK",
Team == "New York Rangers" ~ "NYR",
Team == "Boston Bruins" ~ "BOS",
Team == "Colorado Avalanche" ~ "COL",
Team == "Vancouver Canucks" ~ "VAN",
Team == "Los Angeles Kings" ~ "LAK",
Team == "Florida Panthers" ~ "FLA",
Team == "Detroit Red Wings" ~ "DET",
Team == "Dallas Stars" ~ "DAL",
Team == "Winnipeg Jets" ~ "WPG",
Team == "Carolina Hurricanes" ~ "CAR",
Team == "Tampa Bay Lightning" ~ "TBL",
Team == "Philadelphia Flyers" ~ "PHI",
Team == "Arizona Coyotes" ~ "ARZ",
Team == "Toronto Maple Leafs" ~ "TOR",
Team == "St. Louis Blues" ~ "STL",
Team == "New York Islanders" ~ "NYI",
Team == "Nashville Predators" ~ "NSH",
Team == "Washington Capitals" ~ "WAS",
Team == "New Jersey Devils" ~ "NJD",
Team == "Pittsburgh Penguins" ~ "PIT",
Team == "Montreal Canadiens" ~ "MTL",
Team == "Calgary Flames" ~ "CGY",
Team == "Buffalo Sabres" ~ "BUF",
Team == "Minnesota Wild" ~ "MIN",
Team == "Seattle Kraken" ~ "SEA",
Team == "Edmonton Oilers" ~ "EDM",
Team == "Columbus Blue Jackets" ~ "CBJ",
Team == "Ottawa Senators" ~ "OTT",
Team == "Anaheim Ducks" ~ "ANA",
Team == "San Jose Sharks" ~ "SJS",
Team == "Chicago Blackhawks" ~ "CHI"
)) |>
arrange(desc(point_per_game))
ggplot(data = league_standings_abbr, aes(x = point_per_game, y = reorder(Team, point_per_game), label = Team)) +
geom_point(color = ifelse(league_standings_abbr$Team == "PHI", "orange", "black")) +
geom_segment(aes(x = 0, xend = point_per_game, y = Team, yend = Team), color = ifelse(league_standings_abbr$Team == "PHI", "orange", "black")) +
geom_vline(xintercept = 0) +
scale_x_continuous(
limits = c(-10, 14),
breaks = seq(-10, 14, 2)
) +
labs(
title = "NHL Standings Adjusted for Games Played",
x = "Points Above/Below Point per Game",
y = "Team"
) +
theme_test()
# Info for reorder command
# https://stackoverflow.com/questions/16961921/plot-data-in-descending-order-as-appears-in-data-frame
#| label: season comparison
#| include: true
#| echo: false
curr_games_standings <- standings |>
filter(games_played == curr_games) |>
mutate(
year = ifelse(year == 2013 & season_num == 5, 2012, year),
year = ifelse(year == 2021 & season_num == 13, 2020, year)
)
avg_points <- curr_games_standings |>
group_by(playoffs) |>
summarize(points = mean(points))
avg_points_playoffs <- avg_points$points[2]
curr_games_standings |>
ggplot(aes(x = year, y = points, fill = playoffs)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = avg_points_playoffs, linetype = "dashed") +
scale_fill_manual(values = c("black", "orange", "gray")) +
scale_y_continuous(
limits = c(0, 40),
breaks = seq(0, 40, 5),
expand = c(0, 0)
) +
scale_x_continuous(breaks = seq(2008, 2023, 2)) +
labs(
title = paste0("Points Through ", curr_games, " Games of the Season"),
x = "Season",
y = "Points"
) +
theme_test() +
theme(legend.title = element_blank()) +
annotate(geom = "text", label = "Avg. number of points\nin playoff seasons", x = 2015, y = 33)
#| label: Goals Across Seasons
#| include: true
#| echo: false
#| warning: false
game_all_season |>
filter(games_played <= curr_games) |>
group_by(season_num, season) |>
summarize(goalsFor = sum(goalsFor),
goalsAgainst = sum(goalsAgainst)) |>
pivot_longer(cols = goalsFor:goalsAgainst,
names_to = "Result",
values_to = "Goals") |>
mutate(Result = case_when(
Result == "goalsFor" ~ "Goals For",
Result == "goalsAgainst" ~ "Goals Against"
)) |>
mutate(playoffs = case_when(
season_num == 1 ~ "Made Playoffs",
season_num == 2 ~ "Made Playoffs",
season_num == 3 ~ "Made Playoffs",
season_num == 4 ~ "Made Playoffs",
season_num == 5 ~ "Did Not Make Playoffs",
season_num == 6 ~ "Made Playoffs",
season_num == 7 ~ "Did Not Make Playoffs",
season_num == 8 ~ "Made Playoffs",
season_num == 9 ~ "Did Not Make Playoffs",
season_num == 10 ~ "Made Playoffs",
season_num == 11 ~ "Did Not Make Playoffs",
season_num == 12 ~ "Made Playoffs",
season_num == 13 ~ "Did Not Make Playoffs",
season_num == 14 ~ "Did Not Make Playoffs",
season_num == 15 ~ "Did Not Make Playoffs",
season_num == 16 ~ "TBD"
)) |>
ggplot(aes(x = season, y = Goals, color = Result)) +
geom_line() +
scale_color_manual(values = c("black", "orange")) +
scale_y_continuous(
limits = c(50, 100),
breaks = seq(50, 100, 10),
expand = c(0, 0)
) +
scale_x_continuous(breaks = seq(2008, 2023, 2)) +
labs(title = paste0("Goals For and Against ", curr_games, " Games Into Season"),
x = "Season",
y = "Goals") +
theme_test() +
theme(legend.title = element_blank())
#| label: Goals For
#| include: true
#| echo: false
#| warning: false
goals_for_hist <- game_all_season |>
filter(season_num < 16) |>
select(gameDate, season_num, shotsOnGoalFor, goalsFor)
avg_shots <- mean(goals_for_hist$shotsOnGoalFor)
avg_goals <- mean(goals_for_hist$goalsFor)
goals_for_23 <- game_all_season |>
filter(season_num == 16) |>
select(gameDate, season_num, W, L, OT, shotsOnGoalFor, goalsFor) |>
mutate(Result = case_when(
W == 1 ~ "Win",
L == 1 ~ "Loss",
OT == 1 ~ "Overtime Loss"
))
ggplot(data = goals_for_23, aes(x = goalsFor, y = shotsOnGoalFor, color = Result)) +
geom_point() +
geom_hline(yintercept = avg_shots, linetype = "dashed") +
geom_vline(xintercept = avg_goals, linetype = "dashed") +
scale_color_manual(values = c("black", "gray", "orange")) +
labs(
title = "Flyers Shoot-and-Score Matrix",
caption = "Note: Dashed lines indicate historical averages of shots on goal and goals scored.",
x = "Goals Scored",
y = "Shots On Goal"
) +
scale_y_continuous(
limits = c(15, 45),
breaks = seq(15, 45, 5)
) +
scale_x_continuous(
limits = c(0, 7),
breaks = seq(0,7,1)
) +
theme_test() +
theme(legend.title = element_blank(),
plot.caption = element_text(hjust = 0)) +
annotate(geom = "text", label = "Frustrating", x = 0.4, y = 45) +
annotate(geom = "text", label = "Boring and Sad", x = 0.7, y = 15) +
annotate(geom = "text", label = "Exciting and Fun", x = 6.3, y = 45) +
annotate(geom = "text", label = "Surprise", x = 6.8, y = 15)
#| label: High Danger Chances
#| include: true
#| echo: false
#| warning: false
shots_23 <- game_all_season |>
filter(season_num == 16) |>
select(gameDate, season_num, highDangerShotsFor, highDangerGoalsFor, mediumDangerShotsFor, mediumDangerGoalsFor, lowDangerShotsFor, lowDangerGoalsFor) |>
pivot_longer(
cols = c(highDangerShotsFor, mediumDangerShotsFor, lowDangerShotsFor),
names_to = "Type",
values_to = "Shots"
) |>
ungroup() |>
mutate(Type = case_when(
Type == "highDangerShotsFor" ~ "High Danger",
Type == "mediumDangerShotsFor" ~ "Medium Danger",
Type == "lowDangerShotsFor" ~ "Low Danger"
)) |>
select(gameDate, Type, Shots)
goals_23 <- game_all_season |>
filter(season_num == 16) |>
select(gameDate, season_num, highDangerShotsFor, highDangerGoalsFor, mediumDangerShotsFor, mediumDangerGoalsFor, lowDangerShotsFor, lowDangerGoalsFor) |>
pivot_longer(
cols = c(highDangerGoalsFor, mediumDangerGoalsFor, lowDangerGoalsFor),
names_to = "Type",
values_to = "Goals"
) |>
ungroup() |>
mutate(Type = case_when(
Type == "highDangerGoalsFor" ~ "High Danger",
Type == "mediumDangerGoalsFor" ~ "Medium Danger",
Type == "lowDangerGoalsFor" ~ "Low Danger"
)) |>
select(gameDate, Type, Goals)
shots_goals_23 <- left_join(goals_23, shots_23, by = c("gameDate", "Type"))
ggplot(shots_goals_23, aes(x = Goals, y = Shots, color = Type)) +
geom_point(position = "jitter") +
# geom_smooth(aes(Type),method = "lm", se = FALSE) +
scale_color_manual(values = c("black", "orange", "grey")) +
labs(
title = "Conversion of Shots",
caption = "Note: Points are jittered and therefore goals may not be represented as whole numbers in the chart.",
x = "Goals",
y = "Shots"
) +
theme_test() +
theme(legend.title = element_blank(),
plot.caption = element_text(hjust = 0))
#| label: Goals Against
#| include: true
#| echo: false
goals_against_hist <- game_all_season |>
filter(season_num < 16) |>
select(gameDate, season_num, shotsOnGoalAgainst, goalsAgainst)
avg_shots_against <- mean(goals_against_hist$shotsOnGoalAgainst)
avg_goals_against <- mean(goals_against_hist$goalsAgainst)
goals_against_23 <- game_all_season |>
filter(season_num == 16) |>
select(gameDate, season_num, W, L, OT, shotsOnGoalAgainst, goalsAgainst) |>
mutate(Result = case_when(
W == 1 ~ "Win",
L == 1 ~ "Loss",
OT == 1 ~ "Overtime Loss"
))
ggplot(data = goals_against_23, aes(x = goalsAgainst, y = shotsOnGoalAgainst, color = Result)) +
geom_point() +
geom_hline(yintercept = avg_shots_against, linetype = "dashed") +
geom_vline(xintercept = avg_goals_against, linetype = "dashed") +
scale_color_manual(values = c("black", "gray", "orange")) +
labs(
title = "Flyers Defend-and-Concede Matrix",
caption = "Note: Dashed lines indicate historical averages of shots against and goals allowed.",
x = "Goals Allowed",
y = "Shots Against"
) +
scale_y_continuous(
limits = c(15, 45),
breaks = seq(15, 45, 5)
) +
scale_x_continuous(
limits = c(0, 7),
breaks = seq(0,7,1)
) +
theme_test() +
theme(legend.title = element_blank(),
plot.caption = element_text(hjust = 0)) +
annotate(geom = "text", label = "Good Goaltending", x = 0.75, y = 45) +
annotate(geom = "text", label = "Solid Defense", x = 0.5, y = 15) +
annotate(geom = "text", label = "Hope We Scored", x = 6.3, y = 45) +
annotate(geom = "text", label = "Unlucky Bounces", x = 6.3, y = 15)
#| label: Takeaways and Giveaways 2023
#| include: true
#| echo: false
#| warning: false
give_take_23 <- game_all_season |>
filter(season_num == 16) |>
select(gameDate, season, season_num, opposingTeam, games_played, W, takeawaysAgainst, giveawaysAgainst, takeawaysFor, giveawaysFor) |>
mutate(
Turnovers = takeawaysAgainst + giveawaysAgainst,
Takeaways = takeawaysFor + giveawaysFor
)
team_labels <- give_take_23$opposingTeam
game_dates <- give_take_23$gameDate
game_number <- give_take_23$games_played
turnover_differential <- sum(ifelse(give_take_23$Turnovers > give_take_23$Takeaways,1,0))
give_take_23 <- give_take_23 |>
pivot_longer(
cols = Turnovers:Takeaways,
names_to = "Result",
values_to = "Value"
)
ggplot(give_take_23, aes(x = games_played, y = Value, color = Result)) +
geom_line() +
geom_point(aes(shape = factor(W)), size = 3.5) +
scale_shape_manual(values = c("L", "W"), guide = "none") +
scale_color_manual(values = c("orange", "black")) +
scale_x_continuous(
breaks = seq(min(game_number), max(game_number), 2),
labels = team_labels[seq(min(game_number), max(game_number), 2)]
) +
labs(
title = "Takeaways and Turnovers 2023-2024 Season",
x = "Games",
y = "Number"
) +
theme_test() +
theme(legend.title = element_blank())
# Info about shape_color_manual found here:
# https://www.datanovia.com/en/blog/ggplot-point-shapes-best-tips/
# Get rid of point axis
# https://stackoverflow.com/questions/11714951/remove-extra-legends-in-ggplot2
#| label: Division Play
#| include: true
#| echo: false
#| warning: false
# Include just games played against Flyers divisional rivals
division <- game_all_season |>
filter(opposingTeam == "NYR" | opposingTeam == "PIT" | opposingTeam == "NYI" | opposingTeam == "WSH" | opposingTeam == "CAR" | opposingTeam == "CBJ" | opposingTeam == "N.J" | opposingTeam == "NJD") |>
select(gameDate, season, season_num, opposingTeam, W, L, OT, P) |>
mutate(
points = cumsum(P),
poss_points = 2
) |>
group_by(season_num, season) |>
summarize(
points = sum(P),
poss_points = sum(poss_points),
Wins = sum(W),
Losses = sum(L),
OTL = sum(OT)
) |>
mutate(
points_percentage = 100 * (points / poss_points),
games_with_points = Wins + OTL
) |>
pivot_longer(
cols = Wins:OTL,
names_to = "Result",
values_to = "Record"
)
points_labels <- division |>
group_by(season_num, season) |>
summarize(
games = sum(Record),
games_with_points = mean(games_with_points, na.rm = TRUE),
points_percentage = mean(points_percentage, na.rm = TRUE)
)
ggplot(data = division, aes(x = season, y = Record, fill = Result, alpha = Result)) +
geom_bar(stat = "identity", color = "black") +
scale_fill_manual(values = c("white", "black", "orange")) +
scale_alpha_manual(values = c(0.1, 1, 1)) +
scale_y_continuous(
limits = c(0, 45),
breaks = seq(0, 45, 9),
expand = c(0, 0)
) +
scale_x_continuous(breaks = seq(2008, 2023, 2)) +
labs(
title = "Divisional Play Breakdown and Points Percentage",
x = "Season",
y = "Games",
caption = "Note: Labels in each bar represent points percentage."
) +
theme_test() +
geom_text(
data = points_labels,
aes(x = season, y = games_with_points, label = format(round(points_percentage, 1), nsmall = 1)), inherit.aes = FALSE,
vjust = -1,
size = 3.5
) +
theme(plot.caption = element_text(hjust = 0))
# Info on how to left-align the caption:
# https://stackoverflow.com/questions/64701500/left-align-ggplot-caption
View(division)
log((0.07/(1-0.07)))
0.6658333 - 0.4262857
R.Version()
R.Version()
R.version
R.version()
R.version()
R.Version()
git
install.packages(c("arrow", "askpass", "BH", "bookdown", "brew", "brio", "bslib", "classInt", "cli", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "dagitty", "data.table", "DBI", "dbplyr", "desc", "DescTools", "DiceDesign", "digest", "distill", "dplyr", "DT", "e1071", "evaluate", "expm", "fansi", "future", "future.apply", "gdata", "gert", "GGally", "ggformula", "ggplot2", "ggrepel", "ggridges", "ggthemes", "glue", "graphlayouts", "gt", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "httr2", "igraph", "jsonlite", "knitr", "labeling", "later", "lava", "lifecycle", "lme4", "lmom", "lubridate", "maps", "markdown", "Matrix", "MatrixModels", "minqa", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "openssl", "ordinal", "patchwork", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "processx", "progress", "psych", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readr", "recipes", "rematch", "renv", "reprex", "rlang", "rmarkdown", "rootSolve", "roxygen2", "rprojroot", "s2", "sass", "scales", "sf", "shiny", "stringi", "stringr", "systemfonts", "tarchetypes", "targets", "testthat", "textshaping", "tidygraph", "timeDate", "tinytex", "ucminf", "units", "utf8", "uuid", "V8", "vctrs", "vipor", "vroom", "waldo", "warp", "withr", "wk", "xfun", "xml2", "yaml"))
library(gapminder)
gapminder_unfiltered
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(max(lifeExp))
library(tidyverse)
library(tidyverse)
library(tidyverse)
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(max(lifeExp))
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarise(max(lifeExp))
library(tidyverse)
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(max(lifeExp))
library(vctrs)
remove.packages("vctrs")
library(tidyverse)
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(max(lifeExp))
install.packages("vctrs")
install.packages("vctrs")
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
remove.packages("vctrs")
install.packages("vctrs")
library(tidyverse)
install.packages("vctrs")
library(tidyverse)
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(max(lifeExp))
library(gapminder)
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(max(lifeExp))
View(sumdat)
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(lifeExp = max(lifeExp)) |>
ungroup() |>
group_by(year) |>
filter(max(lifeExp))
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(lifeExp = max(lifeExp)) |>
ungroup()
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(lifeExp = max(lifeExp)) |>
ungroup() |>
group_by(year) |>
filter(lifeExp = max(lifeExp))
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(lifeExp = max(lifeExp)) |>
ungroup() |>
group_by(year) |>
filter(lifeExp == max(lifeExp))
sumdat <- gapminder_unfiltered |>
group_by(year, country) |>
summarize(lifeExp = max(lifeExp)) |>
ungroup() |>
group_by(year) |>
filter(lifeExp == max(lifeExp)) |>
ungroup()
pwd()
getwd()
